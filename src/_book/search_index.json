[
["index.html", "edXviz Dashboard: David Laing’s Capstone Notebook 1 Capstone Notebook", " edXviz Dashboard: David Laing’s Capstone Notebook David Laing 2017-06-26 1 Capstone Notebook Capstone project for the Master of Data Science program at the University of British Columbia. To create this document, navigate to the notebook directory in R, and run the following code: bookdown::render_book(&#39;index.Rmd&#39;, &#39;all&#39;) To recreate Rd files from the source code, use the following command in R: roxygen2::roxygenise(clean = TRUE) I began keeping a daily journal on May 9th, which is why the entries before that date are a bit sparse. "],
["week-1.html", "2 Week 1 2.1 Tuesday April 25 2.2 Wednesday April 26 2.3 Thursday April 27", " 2 Week 1 2.1 Tuesday April 25 2.1.1 Overview: I did some initial exploration of the forum data in the marketing course. In particular, I explored the sentiment of the language used in the forum. 2.1.2 Git commits: 2.1.3 Updates to key visualizations: 2.2 Wednesday April 26 2.2.1 Overview: For the first day of the hackathon, we established some goals and plans. We discussed the possibility of sending automated reports rather than creating a dashboard. I made a plot of daily active users. 2.2.2 Git commits: 2.2.3 Updates to key visualizations: 2.3 Thursday April 27 2.3.1 Overview: We had more discussions about the ideal way to present information. I improved the plot of the forum sentiment. 2.3.2 Git commits: 2.3.3 Updates to key visualizations: "],
["week-2.html", "3 Week 2 3.1 Monday May 1 3.2 Tuesday May 2 3.3 Wednesday May 3 3.4 Friday May 5", " 3 Week 2 3.1 Monday May 1 3.1.1 Overview: I tried some topic modelling of the forum data, using Latent Dirichlet allocation (LDA), but I found that it was very difficult to get useful and interpretable topics across different courses. 3.1.2 Git commits: 3.2 Tuesday May 2 3.2.1 Overview: I made a first attempt at linking the forum posts with specific categories in the discussion forum. 3.2.2 Git commits: 3.3 Wednesday May 3 3.3.1 Overview: I figured out how to link the forum posts with the categories/subcategories, and made some visualizations of the most-used words. 3.3.2 Git commits: 3.3.3 Updates to key visualizations: 3.4 Friday May 5 3.4.1 Overview: I edited and submitted the capstone proposal. 3.4.2 Git commits: "],
["week-3.html", "4 Week 3 4.1 Monday May 8 4.2 Tuesday May 9 4.3 Wednesday May 10 4.4 Thursday May 11", " 4 Week 3 4.1 Monday May 8 4.1.1 Overview: Mainly, I prepared for the proposal presentation. I also developed an alternative visualization of the most-used words throughout the discussion forum subcategories. It is based on text visualizations made by Netlytic. 4.1.2 Git commits: 4.1.3 Updates to key visualizations: 4.2 Tuesday May 9 4.2.1 Overview: I made my forum wrangling code more generalizable across courses, and added filtering functionality to the forum dashboard. 4.2.2 Git commits: 4.3 Wednesday May 10 4.3.1 Overview: I parsed the XML file containing the correct order of the forum elements, and joined that with the JSON file containing the ids of each forum elements. I fixed the factor ordering, which took way longer than expected. 4.3.2 Git commits: 4.3.3 Updates to key visualizations: 4.3.4 Top priority for next day: Convert code in Rmd to R scripts for automatic preprocessing of forum visualizations. 4.4 Thursday May 11 4.4.1 Overview: As a team, we wrote a Google doc containing data/task abstractions for each visualization. As a team, we cleaned up Trello board and reassigned sprint tasks for next week. We met with Sarah, who helped us prioritize visualizations. I successfully generalized the forum wrangling to Climate Change, Marketing, Useful Genetics, and Creative Writing. I converted forum wrangling code into a clean, organized script. 4.4.2 Git commits: 4.4.3 Top priority for next day: Get read events for forum sections. Over the weekend: Try to remake the forum posts plot in D3. Try to prototype a dashboard in D3, if possible. Go back through notebook and fill in gaps. "],
["week-4.html", "5 Week 4 5.1 Monday May 15 5.2 Tuesday May 16 5.3 Wednesday May 17 5.4 Thursday May 18", " 5 Week 4 5.1 Monday May 15 5.1.1 Overview: We had a long meeting in the morning with Ido and Sarah to pin down the most important plots that need to be made. In the afternoon, I worked on getting the number of read events for each discussion category, and then built a prototype of a dashboard for the forum data. 5.1.2 Git commits: 5.1.3 Updates to key visualizations: 5.1.4 Top priorities for next day: Fix cases where there are zero reads/posts for a given category. Add wordcloud to dashboard? 5.2 Tuesday May 16 5.2.1 Overview: I fixed the cases where there are zero reads/posts for a given category. I added a wordcloud to the dashboard, and linked it with the discussion subsections. I displayed the forum posts in the dashboard (currently no linking or smart ordering). 5.2.2 Git commits: 5.2.3 Updates to key visualizations: 5.2.4 Top priorities for next day: Test out the dashboard with other courses. Try using Matt’s BigQuery script. Re-run database query but include number of likes/pins, so that I can display interesting posts in each discussion category. 5.3 Wednesday May 17 5.3.1 Overview: I redesigned my SQL queries so that the forum data includes the number of upvotes, reads, and dates. I wrangled each of the new forum datasets. For each course, I loaded the wrangled data into the dashboard. I displayed the top forum posts in the dashboard. I added an option for reordering the forum subcategories by their rank, which caused a million bugs, most of which I managed to squish. 5.3.2 Git commits: 5.3.3 Updates to key visualizations: 5.3.4 Top priorities for next day: Test my dashboard in the course sandbox. Fix bug where the dashboard crashes when the filtered demographics contain no users. 5.4 Thursday May 18 5.4.1 Overview: I tested my dashboard in the course sandbox. I fixed several bugs related to cases when the filtered demographics contain no users. 5.4.2 Git commits: 5.4.3 Updates to key visualizations: 5.4.4 Top priorities for next day: Get feedback from everyone on the forum dashboard. "],
["week-5.html", "6 Week 5 6.1 Tuesday May 23 6.2 Wednesday May 24 6.3 Thursday May 25", " 6 Week 5 6.1 Tuesday May 23 6.1.1 Overview: I made a few tweaks to the forum dashboard, republished it, and sent it to Ido for feedback. Much of my day got derailed by the STAT teaching presentation and lunch, which occupied me from 10:45am to around 2:00pm. 6.1.2 Git commits: 6.1.3 Updates to key visualizations: 6.1.4 Top priorities for next day: Work with Matt to get the BigQuery script working. Determine my next major tasks. (Possibly work on displaying the selected subcategory on the main plot?) 6.2 Wednesday May 24 6.2.1 Overview: Matt wasn’t in today, so I couldn’t work with him to get the BigQuery script working. I tested out my code on a few more courses. I tried to download all the data for the marketing course, but ran into an authorization issue with BigQuery, so I asked Ido and Sarah what to do – no response yet. I spent a few hours in the afternoon trying to access the video transcripts, to no avail. 6.2.2 Git commits: 6.2.3 Top priorities for next day: Get feedback from Sarah on forum view of dashboard. Try out the shiny dashboard in Azure. 6.3 Thursday May 25 6.3.1 Overview: I got feedback from Sarah on my forum dashboard. I went out for lunch with the UX designer at Thinkific, and got some advice. I had a bad headache, so I had to end the day early. "],
["week-6.html", "7 Week 6 7.1 Monday May 29 7.2 Tuesday May 30 7.3 Wednesday May 31 7.4 Thursday June 1", " 7 Week 6 7.1 Monday May 29 7.1.1 Overview: We spent most of the morning in a meeting with Ido, Sarah, and two of the learning analytics people at UBC. We showed them what we’ve made so far, and got some feedback. They seemed quite pleased with our progress so far. In the afternoon, I worked with Matt to get the BigQuery script working, and it is now functional. This was a major step forward, as I can now use the full dataset for a given course. I tested the forum view of the dashboard with the full data for the marketing course; it loads and updates slower than I’d like, but it’s definitely functional. I made a few minor changes to the forum view, as per feedback from Ido and Sarah. 7.1.2 Git commits: 7.1.3 Top priorities for next day: Get the forum view working for the psychology course. Add additional filtering options. Start scheduling user-testing. Write paragraph to describe our presentation to LAVA group. 7.2 Tuesday May 30 7.2.1 Overview: I wrote the description of our LAVA presentation, and sent it to Ido. I got the forum view working for the psychology course. I added two new filtering options: age, and activity level. I asked Ido and Sarah about scheduling user-testing. 7.2.2 Git commits: 7.2.3 Updates to key visualizations: 7.2.4 Top priorities for next day: Write user-testing protocol. 7.3 Wednesday May 31 7.3.1 Overview: I removed language filtering, and fixed the size and font of the wordcloud title. I also added a tooltip to the forum posts dropdown. I wrote a draft of the user-testing protocol. 7.3.2 Git commits: 7.3.3 Updates to key visualizations: 7.3.4 Top priorities for next day: Add help buttons and pop-ups. Add language filtering. Create a Google Sheets template for collecting feedback from user-testing sessions. Investigate R package/module creation options. 7.4 Thursday June 1 7.4.1 Overview: We had our first user-testing session this morning. It went pretty well, but it also made it clear that several changes were required for the forum view. We spent a fair bit of time talking as a team about all the improvements that needed to be done. I spent many hours in the evening trying to implement some seemingly simple changes, but had a lot of trouble with bugs in plotly. I ended up updating shiny, plotly, and ggplot, which introduced new bugs in plotly, so I think I’m stuck with ggplot now. So now I’m trying to remember how to get a click event to stay updated, and not reset to NULL. It’s been very frustrating. 7.4.2 Git commits: 7.4.3 Updates to key visualizations: 7.4.4 Top priorities for next day: Continue working on click events problem. "],
["week-7.html", "8 Week 7 8.1 Monday June 5 (and weekend) 8.2 Tuesday June 6 8.3 Wednesday June 7 8.4 Thursday June 8", " 8 Week 7 8.1 Monday June 5 (and weekend) 8.1.1 Overview: I worked many hours over the weekend to come up with a new solution for aggregating and displaying the data using ggplot. I think it was for the better; it should now be much clearer to the user what level of aggregation they’re viewing, and also which category has been selected. This morning I had a meeting with Letitia to get feedback on our user-testing protocol, which was helpful. In the afternoon we had a meeting with Derek and Pan to discuss deployment, and then after that we had another usability test with three TAs for the course on Systematic Program Design. In the evening, I implemented some changes that were shown to be necessary during the usability test. 8.1.2 Git commits: 8.1.3 Updates to key visualizations: 8.1.4 Top priorities for next day: Write down Letitia’s suggestions for the dashboard. Starting writing the full documentation for my wrangling pipeline. 8.2 Tuesday June 6 8.2.1 Overview: We had another full day of meetings, and I had a bit of time in the evening to clean up my dashboard appearance a little bit more. I ditched click interactions because they were causing too much trouble and nobody was using them. I also move the category filter down to the main plot panel, and made the logic of the category/subcategory hierarchy more obvious. I also added author counts, and truncated the thread text. I also discovered a bit of an oversight with regard to the hierarchy of the posts themselves. I realized that when I was filtering by a subcategory, I was only getting initial posts, not response posts or comments (whereas when all categories were selected, I was getting everything). I will have to revisit my wrangling/SQL scripts so that I can infer the commentable_id for the response posts and the comments. 8.2.2 Git commits: 8.2.3 Updates to key visualizations: 8.2.4 Top priorities for next day: Revisit the wrangling/SQL scripts and see if I can infer the commentable_id in a smart and easy way Start mapping out a plan for documentation of my wrangling script and my server/ui. Also look at Matt’s code so that I can organize the shiny code into modules. 8.3 Wednesday June 7 8.3.1 Overview: We gave our presentation to the LAVA group today, and it went very well. We got some valuable feedback, and most of the suggestions were for minor changes. I started mapping out the hierarchy of the forum data today, and rewrote the SQL query for the forum_posts query, though I haven’t tested it yet. Once I get this data in the new form, I think it will be pretty easy to infer the commentable IDs of each response post and comment. 8.3.2 Git commits: 8.3.3 Top priorities for next day: Rewrite the forum_views SQL script so that I can infer the commentable_id of every view, and then (if time) incorporate this into the wrangling script. 8.4 Thursday June 8 8.4.1 Overview: I had a very productive day (and night). I rewrote the sql scripts, rewrote the wrangling scripts, and updated the dashboard to incorporate the different types of forum posts. It ended up being relatively complicated, but I think it’s at the point now where it’s reasonably robust. 8.4.2 Git commits: 8.4.3 Updates to key visualizations: 8.4.4 Top priorities for next day: Documentation and testing. "],
["week-8.html", "9 Week 8 9.1 Monday June 12 9.2 Tuesday June 13 9.3 Wednesday June 14 9.4 Thursday June 15", " 9 Week 8 9.1 Monday June 12 9.1.1 Overview: I made some minor changes to the forum dashboard, and otherwise spent most of my time shuffling files and functions around to get them in the right locations for the release of the R package. I read up on testing in R, and I set up a template file where I can write my unit tests, but I’m holding off on the tests themselves until we’ve all decided what course to use for our sample dataset, because I’m going to have to create some fake data. 9.1.2 Git commits: 9.1.3 Updates to key visualizations: I italicized the category/subcategory names in the plot titles. 9.1.4 Top priorities for next day: Create a detailed diagram of the forum data pipeline. 9.2 Tuesday June 13 9.2.1 Overview: Today I mainly worked on creating diagrams to help explain the hierarchy of the discussion forum and the forum data cleaning pipeline. I also wrote an R wrapper for running bash scripts, and did a bit of reading about deploying to Azure. 9.2.2 Git commits: 9.2.3 Updates to key visualizations: 9.2.4 Top priorities for next day: Write tests for most-used functions. 9.3 Wednesday June 14 9.3.1 Overview: I made sample CSVs for forum_posts, forum_views, and forum_searches. I added the forum module and server to the global dashboard. I wrote tests for three of the functions in the forum wrangling script. 9.3.2 Git commits: 9.3.3 Top priorities for next day: Continue writing tests. 9.4 Thursday June 15 9.4.1 Overview: Today ended up being a day of bug fixing, since there were a whole bunch of unexpected complications with rendering the forum view as its own UI. I’m currently stuck trying to update the selectInput for the subcategory when the category changes. I’m genuinely unsure about how to fix it. 9.4.2 Git commits: 9.4.3 Top priorities for next day: Fix the shiny modules + selectInput problem. "],
["week-9.html", "10 Week 9 10.1 Monday June 19 (and weekend) 10.2 Tuesday June 20 10.3 Wednesday June 21 10.4 Thursday June 22 10.5 Friday June 23", " 10 Week 9 10.1 Monday June 19 (and weekend) 10.1.1 Overview: Over the weekend, I fixed the shiny modules + selectInput problem that arose when we all combined our dashboards into a single dashboard. I also wrote tests for all my wrangling functions, and for most of my server functions. Today, I finished writing tests for my server functions, and then spent most of the afternoon learning how bookdown works, for a nicer presentation of my notebook and final report. I also briefly explored the packagedocs package, which I think we can use to automatically create a website using github pages to host all our documentation. It can also be integrated with TravisCI. 10.1.2 Git commits: 10.1.3 Top priorities for next day: Get a packagedocs website up and running for our documentation. Include all my code in this book. 10.2 Tuesday June 20 10.2.1 Overview: Today I mainly worked on including function documentation in this report. I didn’t get a packagedocs website up, because I didn’t have time to coordinate with Andrew, but we should be able to do that tomorrow or Thursday. 10.2.2 Git commits: 10.2.3 Top priorities for next day: Do a really good job of presenting our dashboard to the CTLT. Try to get a packagedocs website up. 10.3 Wednesday June 21 10.3.1 Overview: 10.3.2 Git commits: 10.3.3 Updates to key visualizations: 10.3.4 Top priorities for next day: 10.4 Thursday June 22 10.4.1 Overview: We gave a presentation to the CTLT today, and then went out for lunch with Ido and Sarah. In the afternoon we attended a learning analytics presentation that Ido and Leah were giving. There wasn’t much time left for work after that. 10.4.2 Top priorities for next day: Fix the bug in the responses/comments counts. Documentation. 10.5 Friday June 23 10.5.1 Overview: Because of a change that Matt made, which will allow us to host multiple courses on one server, I had to change a few things in my forum server module. Namely, I had to read in the csvs as reactive files. This didn’t take too long. The bulk of my day, i.e. 11:30am to 11:00pm, was spent trying to fix a nasty bug that I found yesterday morning before the presentation. The number of responses and comments in the threads table wasn’t matching the numbers shown in the main barplot. I eventually figured it out. 10.5.2 Git commits: 10.5.3 Top priorities for next day: Replace forum titles with forum text, as per Ido’s request. Write a paragraph to explain the forum hierarchy. Write a paragraph to explain the the forum wrangling. Write 2-3 paragraphs to justify the visualizations. Compile all this documentation in the R package. "],
["r-functions.html", "11 R Functions 11.1 Wrangling Functions 11.2 Server Functions", " 11 R Functions 11.1 Wrangling Functions 11.1.1 get_activity_levels 11.1.1.1 Main Documentation Convert sum_dt to activity_level. Description: Convert sum_dt to activity_level. Usage: get_activity_levels(forum) Arguments: forum: A forum dataframe. Value: The same dataframe with a new column for activity_level. Examples: get_activity_levels(forum) 11.1.2 get_discussion_vars_json 11.1.2.1 Main Documentation Get the variables associated with each forum element in the JSON file. (for use in &#39;prepare_json&#39;). Description: Get the variables associated with each forum element in the JSON file. (for use in &#39;prepare_json&#39;). Usage: get_discussion_vars_json(i, all_elements) Arguments: i: An iterator. all_elements: A nested list containing attributes for each course element. Value: A vector containing the &#39;commentable_id&#39;, &#39;display_name&#39;, &#39;discussion_category&#39;, and &#39;discussion_target&#39; of a course element. Examples: get_discussion_vars_json(i) 11.1.3 get_discussion_vars_xml 11.1.3.1 Main Documentation Get the variables associated with each forum element in the XML file (for use in &#39;prepare_xml&#39;). Description: Get the variables associated with each forum element in the XML file (for use in &#39;prepare_xml&#39;). Usage: get_discussion_vars_xml(i, all_parameters) Arguments: i: An iterator. all_parameters: An XML tree containing all the parameters associated with each discussion node. Value: A vector containing the &#39;display_name&#39;, &#39;discussion_category&#39;, and &#39;discussion_target&#39; of a course element. Examples: get_discussion_vars_xml(i) 11.1.4 infer_post_subcategories 11.1.4.1 Main Documentation Infer the subcategories of each post, even if it&#39;s a response post or a comment. Description: Infer the subcategories of each post, even if it&#39;s a response post or a comment. Usage: infer_post_subcategories(forum) Arguments: forum: A forum dataframe. Value: The same dataframe with commentable_id filled in for everything. Examples: infer_post_subcategories(forum) 11.1.5 prepare_json 11.1.5.1 Main Documentation Prepare the JSON file for joining with the XML file. Description: Prepare the JSON file for joining with the XML file. Usage: prepare_json(json) Arguments: json: A JSON file containing information about the course elements. Value: A dataframe with four columns: &#39;commentable_id&#39;, &#39;display_name&#39;, &#39;discussion_category&#39;, and &#39;discussion_target&#39;. Examples: prepare_json(json) 11.1.6 prepare_posts 11.1.6.1 Main Documentation Prepare the forum posts. Description: Prepare the forum posts. Usage: prepare_posts(forum) Arguments: forum: A dataframe with one post per row. Value: The prepared forum posts data. Examples: prepare_posts(forum) 11.1.7 prepare_searches 11.1.7.1 Main Documentation Prepare the forum searches dataframe. Description: Prepare the forum searches dataframe. Usage: prepare_searches(forum) Arguments: forum: A dataframe with one search event per row. Value: The forum searches data with a new column for activity level. Examples: prepare_searches(forum) 11.1.8 prepare_views 11.1.8.1 Main Documentation Prepare the forum views dataframe. Description: Prepare the forum views dataframe. Usage: prepare_views(forum) Arguments: forum: A dataframe with one read event per row. Value: The prepared forum views data. Examples: prepare_views(forum) 11.1.9 prepare_words 11.1.9.1 Main Documentation Prepare the forum words. Description: Prepare the forum words. Usage: prepare_words(forum) Arguments: forum: A dataframe with one row per post. Value: The dataframe with each row containing a word, prepared for joining with the forum elements. Examples: prepare_words(forum) 11.1.10 prepare_xml 11.1.10.1 Main Documentation Prepare the XML file for joining with the JSON file. Description: Prepare the XML file for joining with the JSON file. Usage: prepare_xml(xml) Arguments: xml: An XML file containing information about the course elements. Value: A dataframe with three columns: &#39;display_name&#39;, &#39;discussion_category&#39;, and &#39;discussion_target&#39;. Examples: prepare_xml(xml) 11.1.11 wrangle_forum 11.1.11.1 Main Documentation Write the forum posts and forum words to csv. Description: Write the forum posts and forum words to csv. Usage: wrangle_forum(posts_input_path, views_input_path, searches_input_path, json_input_path, xml_input_path, posts_output_path, words_output_path, views_output_path, searches_output_path, elements_output_path) Arguments: posts_input_path: The path to the CSV file containing the forum posts data. views_input_path: The path to the CSV file containing the forum reads data. searches_input_path: The path to the CSV file containing the forum searches data. json_input_path: The path to the JSON file containing data on all course elements. xml_input_path: The path to the XML file containing data on the course structure. posts_output_path: The desired path to which to write the prepared forum posts dataframe. words_output_path: The desired path to which to write the prepared forum words dataframe. views_output_path: The desired path to which to write the prepared forum views dataframe. searches_output_path: The desired path to which to write the prepared forum searches dataframe. elements_output_path: The desired path to which to write the prepared forum elements dataframe. Value: None. Examples: wrangle_forum(csv_path, json_path, xml_path) 11.2 Server Functions root &lt;- &quot;../function_docs/forum_server/&quot; 11.2.1 apply_forum_filters 11.2.1.1 Main Documentation Apply the selected filter settings to the forum data. Description: Apply the selected filter settings to the forum data. Usage: apply_forum_filters(input_df, forum_elements, activity_level = &quot;All&quot;, gender = &quot;All&quot;, registration_status = &quot;All&quot;, category = &quot;All&quot;) Arguments: input_df: The input dataframe. forum_elements: The forum elements dataframe. activity_level: One of &#39;under_30_min&#39;, &#39;30_min_to_5_hr&#39;, &#39;over_5_hr&#39;, or (default) &#39;All&#39;. gender: One of &#39;male&#39;, &#39;female&#39;, &#39;other&#39;, or (default) &#39;All&#39;. registration_status: One of &#39;audit&#39;, &#39;verified&#39;, or (default) &#39;All&#39;. category: One of the forum categories. Value: &#39;filtered_df&#39; A dataframe filtered by the selected settings. Examples: apply_forum_filters(forum_posts, forum_elements, &quot;All&quot;, &quot;All&quot;, &quot;All&quot;) 11.2.2 calculate_forum_searches 11.2.2.1 Main Documentation Calculates the number of unique users who searched for each search query, given the selected filters. Description: Calculates the number of unique users who searched for each search query, given the selected filters. Usage: calculate_forum_searches(forum_searches = wrangled_forum_searches, forum_elements, activity_level, gender, registration_status, category) Arguments: forum_searches: The wrangled forum searches dataframe. forum_elements: The forum elements dataframe. activity_level: The activity level of the students. gender: The gender of the students. registration_status: The registration status of the students. category: The forum category. Value: &#39;forum_searches&#39; The filtered forum searches dataframe. Examples: calculate_forum_searches(wrangled_forum_searches, &quot;under_30_min&quot;, &quot;female&quot;, &quot;verified&quot;, &quot;Part 3&quot;) 11.2.3 count_authors 11.2.3.1 Main Documentation Count the number of authors for each subcategory in an input forum. Description: Count the number of authors for each subcategory in an input forum. Usage: count_authors(input_forum, wrangled_forum_elements) Arguments: input_forum: The input dataframe containing a row for each post in the forum. wrangled_forum_elements: A dataframe containing information about each of the forum subcategories. Value: &#39;author_counts&#39; A dataframe containing the unique author counts for each subcategory in the forum. Examples: count_authors(wrangled_forum_posts) 11.2.4 count_posts 11.2.4.1 Main Documentation Count the number of posts for each subcategory in an input forum. Description: Count the number of posts for each subcategory in an input forum. Usage: count_posts(input_forum, wrangled_forum_elements) Arguments: input_forum: The input dataframe containing a row for each post in the forum. wrangled_forum_elements: A dataframe containing information about each of the forum subcategories. Value: &#39;post_counts&#39; A dataframe containing the post counts for each subcategory in the forum. Examples: count_posts(wrangled_forum_posts) 11.2.5 count_views 11.2.5.1 Main Documentation Count the number of view events for each subcategory in an input forum. Description: Count the number of view events for each subcategory in an input forum. Usage: count_views(input_forum, wrangled_forum_elements) Arguments: input_forum: The input dataframe containing a row for each read event in the forum. wrangled_forum_elements: A dataframe containing information about each of the forum subcategories. Value: &#39;view_counts&#39; A dataframe containing the read counts for each subcategory in the forum. Examples: count_views(wrangled_forum_views) 11.2.6 filter_forum_elements 11.2.6.1 Main Documentation Filter the forum elements by the selected filter variables. Description: Filter the forum elements by the selected filter variables. Usage: filter_forum_elements(forum_elements, category) Arguments: forum_elements: The forum elements dataframe that was passed in from the wrangling script. category: The forum category that the user has selected. Details: The forum elements dataframe only needs to be filtered by category, since it doesn&#39;t include any variables related to students. Value: &#39;filtered_forum_elements&#39; The same dataframe, filtered by category if appropriate. Examples: filter_forum_elements(wrangled_forum_elements, &quot;Part 1&quot;) 11.2.7 filter_wordcloud_data 11.2.7.1 Main Documentation Filter the wordcloud data by the selected filters. Description: Filter the wordcloud data by the selected filters. Usage: filter_wordcloud_data(forum_words, forum_elements, activity_level, gender, registration_status, category) Arguments: forum_words: The forum words dataframe passed in from the wrangling script. forum_elements: The forum elements dataframe. activity_level: The activity level of the students. gender: The gender of the students. registration_status: The registration status of the students. category: The forum category. Value: &#39;filtered_wordcloud_data&#39; The filtered forum words dataframe. Examples: filter_wordcloud_data(wrangled_forum_words, forum_elements, &quot;30_min_to_5_hr&quot;, &quot;female&quot;, &quot;All&quot;, &quot;General&quot;) 11.2.8 gather_post_types 11.2.8.1 Main Documentation Gather the post types into a single column for easy plotting. Description: Gather the post types into a single column for easy plotting. Usage: gather_post_types(forum_data, grouping_var) Arguments: forum_data: The forum data for the main barplot. grouping_var: grouping_var One of &#39;discussion_category&#39; or &#39;display_name&#39;, depending on whether a category has been selected. Value: &#39;gathered&#39; A dataframe with the post types gathered into a single column. Examples: gather_post_types(forum_data, grouping_var = &quot;discussion_category&quot;) 11.2.9 get_author_count 11.2.9.1 Main Documentation Get the number of authors for which the selected filter settings apply. Description: Get the number of authors for which the selected filter settings apply. Usage: get_author_count(forum_posts, forum_elements, activity_level, gender, registration_status, category) Arguments: forum_posts: The forum posts dataframe that was passed in from the wrangling script. forum_elements: The forum elements dataframe. activity_level: The activity level of the students. gender: The gender of the students. registration_status: The registration status of the students. category: The forum category. Value: &#39;author_count&#39; A string showing the number of authors. Examples: get_author_count(wrangled_forum_posts, forum_elements, &quot;All&quot;, &quot;male&quot;, &quot;verified&quot;, &quot;All&quot;) 11.2.10 get_forum_threads 11.2.10.1 Main Documentation Get the forum threads for the authors who match the filter settings. Description: Get the forum threads for the authors who match the filter settings. Usage: get_forum_threads(forum_posts, forum_elements, activity_level, gender, registration_status, category, selected_subcategory) Arguments: forum_posts: The forum posts dataframe that was passed in from the wrangling script. forum_elements: The forum elements dataframe. activity_level: The activity level of the students. gender: The gender of the students. registration_status: The registration status of the students. category: The selected forum category. selected_subcategory: The selected forum subcategory. Value: &#39;forum_threads&#39; The forum threads that were authored by students for which the filter settings apply. Examples: get_forum_threads(forum_posts = wrangled_forum_posts, forum_elements, &quot;over_5_hr&quot;, &quot;female&quot;, &quot;audit&quot;, &quot;All&quot;, &quot;All&quot;) 11.2.11 get_label_lengths 11.2.11.1 Main Documentation Get the lengths of the labels on the main barplot (either the categories or the subcategories). Description: Get the lengths of the labels on the main barplot (either the categories or the subcategories). Usage: get_label_lengths(forum_data, category) Arguments: forum_data: The forum data for the main barplot. category: The selected category. Value: &#39;label_lengths&#39; A list with the lengths (in characters) of each label on the main plot. Examples: get_label_lengths(forum_data, &quot;Technical Questions&quot;) 11.2.12 get_subcategory_options 11.2.12.1 Main Documentation Get the options for the subcategory options, given the selected category. Description: Get the options for the subcategory options, given the selected category. Usage: get_subcategory_options(category, filtered_forum_elements) Arguments: category: The selected category. filtered_forum_elements: The forum elements dataframe, filtered by the selected category. Value: &#39;subcategory_options&#39; A list of options for the user to select from. Examples: get_subcategory_options(&quot;Part 1&quot;, filtered_forum_elements) 11.2.13 get_target_word_counts 11.2.13.1 Main Documentation Get the top words for each subcategory. Description: Get the top words for each subcategory. Usage: get_target_word_counts(input_forum) Arguments: input_forum: The input dataframe containing a row for each word in the forum. Value: &#39;word_counts&#39; A dataframe containing the counts for each word in each subcategory. Examples: get_target_word_counts(wrangled_forum_words) 11.2.14 get_wordcloud_data 11.2.14.1 Main Documentation Get the counts of each word in the selected subcategories. Description: Get the counts of each word in the selected subcategories. Usage: get_wordcloud_data(filtered_wordcloud_data, filtered_forum_elements, category, selected_subcategory) Arguments: filtered_wordcloud_data: The filtered forum words dataframe. filtered_forum_elements: The filtered forum elements dataframe. category: The selected category. selected_subcategory: The selected subcategory. Value: &#39;wordcloud_data&#39; A dataframe with the counts of each word in the selected subcategory(ies). Examples: get_wordcloud_data(filtered_wordcloud_data, filtered_forum_elements, &quot;Part 1&quot;, &quot;Part 1 Lecture 1 Discussion&quot;) 11.2.15 make_forum_barplot 11.2.15.1 Main Documentation Make the main barplot for displaying the forum data. Description: Make the main barplot for displaying the forum data. Usage: make_forum_barplot(forum_data, xvar_string, plot_variable, fill_value, axis_limit, category, ylabel, breakdown) Arguments: forum_data: The forum data for the main barplot. xvar_string: A string that matches the function to call for the x value of aes_string(). plot_variable: One of (default) &#39;posts&#39;, &#39;authors&#39;, or &#39;views&#39;. fill_value: A hex value representing the color for the bar fill. axis_limit: The maximum axis limit for the horizontal axis in the main barplot. category: The selected category. ylabel: The label of the y-axis in the main barplot. breakdown: One of &#39;TRUE&#39; or &#39;FALSE&#39;; determines whether the post types breakdown is shown. Value: &#39;forum_barplot&#39; A ggplot2 object to be rendered as the main forum barplot. Examples: make_forum_barplot(forum_data, xvar_string = &quot;fct_reorder(discussion_category, course_order, .desc = TRUE)&quot;, plot_variable = &quot;authors&quot;, fill_value = &quot;red&quot;, axis_limit = 100, category = &quot;All&quot;, ylabel = &quot;Category&quot;, breakdown = FALSE) 11.2.16 make_forum_breakdown_barplot 11.2.16.1 Main Documentation Make the main forum barplot with the post types breakdown. Description: Make the main forum barplot with the post types breakdown. Usage: make_forum_breakdown_barplot(gathered, xvar_string, grouping_var, axis_limit, xlabel) Arguments: xvar_string: A string that matches the function to call for the x value of aes_string(). grouping_var: grouping_var One of &#39;discussion_category&#39; or &#39;display_name&#39;, depending on whether a category has been selected. axis_limit: The maximum axis limit for the horizontal axis in the main barplot. xlabel: The label of the x-axis in the main barplot. forum_data: The forum data for the main barplot. Value: &#39;forum_breakdown_barplot&#39; A ggplot2 object to be rendered as the main forum barplot. Examples: make_forum_breakdown_barplot(forum_data = forum_data, xvar_string = &quot;fct_reorder(discussion_category, course_order, .desc = TRUE)&quot;, axis_limit = 100, grouping_var = &quot;discussion_category&quot;, xlabel = &quot;Category&quot;) 11.2.17 make_wordcloud 11.2.17.1 Main Documentation Make the wordcloud. Description: Make the wordcloud. Usage: make_wordcloud(wordcloud_data, max_words = 20, scale = c(3.5, 1)) Arguments: wordcloud_data: A dataframe showing the counts of the top words in the selected subcategory. max_words: The maximum number of words to show in the wordcloud. Default is 20. scale: A list giving the range of sizes to for the display of words in the wordcloud. Default is c(3.5,1). Value: A wordcloud object. Examples: make_wordcloud(wordcloud_data, max_words = 30, scale = c(4,1.5)) 11.2.18 set_axis_limit 11.2.18.1 Main Documentation Warning in parse_Rd(&quot;../function_docs/forum_server/set_axis_limit.Rd&quot;, encoding = &quot;unknown&quot;, : ../function_docs/forum_server/set_axis_limit.Rd:21: unexpected section header &#39;\\value&#39; Warning in parse_Rd(&quot;../function_docs/forum_server/set_axis_limit.Rd&quot;, encoding = &quot;unknown&quot;, : ../function_docs/forum_server/set_axis_limit.Rd:24: unexpected section header &#39;\\description&#39; Warning in parse_Rd(&quot;../function_docs/forum_server/set_axis_limit.Rd&quot;, encoding = &quot;unknown&quot;, : ../function_docs/forum_server/set_axis_limit.Rd:27: unexpected section header &#39;\\details&#39; Warning in parse_Rd(&quot;../function_docs/forum_server/set_axis_limit.Rd&quot;, encoding = &quot;unknown&quot;, : ../function_docs/forum_server/set_axis_limit.Rd:33: unexpected section header &#39;\\examples&#39; Warning in parse_Rd(&quot;../function_docs/forum_server/set_axis_limit.Rd&quot;, encoding = &quot;unknown&quot;, : ../function_docs/forum_server/set_axis_limit.Rd:36: unexpected END_OF_INPUT &#39; &#39; Set the horizontal axis limit of the main barplot. Usage: set_axis_limit(forum_data, plot_variable, label_lengths, min_axis_length = 0.1, percent_addition_per_char = 0.023) Arguments: forum_data: The forum data for the main barplot. plot_variable: One of (default) &#39;posts&#39;, &#39;authors&#39;, or &#39;views&#39;. label_lengths: A list containing the lengths (in characters) of each label on the barplot. min_axis_length: The axis length to set if all the values are set to zero (i.e. all students have been filtered out). Default is 0.1 so that the axis is minimally affected when values are small. percent_addition_per_char: The percentage by which to expand the axis per character in the label of the longest bar. Default is 0.023, i.e. 2.3 &#39;axis_limit&#39; The maximum axis limit for the horizontal axis in the main barplot. Set the horizontal axis limit of the main barplot. Usually, the variance in bar lengths is greater than the variance in label lengths. If this is not the case, it is possible that the axis limit will need to be expanded further. For example, the second-longest bar may have a label that is twice as long as the label of the longest bar. In the future, it will be desirable to account for these cases. set_axis_limit(forum_data, &quot;views&quot;, c(15,12,14,7)) 11.2.19 set_breakdown 11.2.19.1 Main Documentation Determines whether the plot types breakdown will be shown. Description: Determines whether the plot types breakdown will be shown. Usage: set_breakdown(plot_variable, breakdown) Arguments: plot_variable: One of (default) &#39;posts&#39;, &#39;authors&#39;, or &#39;views&#39;. breakdown: One of &#39;TRUE&#39; or (default) &#39;FALSE&#39;. Details: This option only comes into play if the plot variable is &#39;posts&#39;. Value: &#39;TRUE&#39; or &#39;FALSE&#39; Examples: set_breakdown(plot_variable = &quot;posts&quot;, breakdown = FALSE) 11.2.20 set_forum_plot_title 11.2.20.1 Main Documentation Set the title of the main barplot, according to the relevant variable and category. Description: Set the title of the main barplot, according to the relevant variable and category. Usage: set_forum_plot_title(plot_variable, category) Arguments: plot_variable: One of (default) &#39;posts&#39;, &#39;authors&#39;, or &#39;views&#39;. Value: &#39;forum_plot_title&#39; A string for the plot title. Examples: set_forum_plot_title(&quot;views&quot;, &quot;Part 1&quot;) 11.2.21 set_forum_plot_ylabel 11.2.21.1 Main Documentation Set the label of the y-axis in the main barplot. Description: Set the label of the y-axis in the main barplot. Usage: set_forum_plot_ylabel(plot_variable) Arguments: plot_variable: One of (default) &#39;posts&#39;, &#39;authors&#39;, or &#39;views&#39;. Value: &#39;forum_plot_ylabe&#39; The label of the y-axis in the main barplot. Examples: set_forum_plot_ylabel(&quot;authors&quot;) 11.2.22 set_forum_threads_title 11.2.22.1 Main Documentation Set the title of the forum threads table. Description: Set the title of the forum threads table. Usage: set_forum_threads_title(category, selected_subcategory) Arguments: category: The selected category. selected_subcategory: The selected subcategory. Value: &#39;forum_threads_title&#39; A string for the title of the forum threads table. Examples: set_forum_threads_title(&quot;Part 3&quot;, &quot;All&quot;) 11.2.23 set_wordcloud_title 11.2.23.1 Main Documentation Set the title of the wordcloud. Description: Set the title of the wordcloud. Usage: set_wordcloud_title(category, selected_subcategory) Arguments: category: The selected category. selected_subcategory: The selected subcategory. Value: &#39;wordcloud_title&#39; A string for the wordcloud title. Examples: set_wordcloud_title(&quot;Part 3&quot;, &quot;All&quot;) 11.2.24 specify_forum_data_selection 11.2.24.1 Main Documentation Specify which subcategory has been selected. Description: Specify which subcategory has been selected. Usage: specify_forum_data_selection(updated_forum_data, category, selected_subcategory) Arguments: updated_forum_data: The dataframe containing the counts for each (sub)category. category: The selected category. selected_subcategory: The selected subcategory. Value: &#39;forum_w_selection&#39; The same dataframe with a new column, &#39;selected&#39;. Examples: specify_forum_data_selection(updated_forum_data, &quot;Part 1&quot;, &quot;Part 1 Video Discussion&quot;) 11.2.25 update_forum_data 11.2.25.1 Main Documentation Update the post, view, and author counts for the selected filters. Description: Update the post, view, and author counts for the selected filters. Usage: update_forum_data(forum_posts, forum_views, forum_elements, activity_level, gender, registration_status, category) Arguments: forum_posts: The forum posts dataframe passed in from the wrangling script. forum_views: The forum views dataframe passed in from the wrangling script. forum_elements: The forum elements dataframe passed in from the wrangling script. activity_level: The activity level of the students. gender: The gender of the students. registration_status: The registration status of the students. category: The forum category. Value: &#39;filtered_forum_data&#39; A dataframe with one row per subcategory (or category), and counts for each variable. Examples: update_forum_data(wrangled_forum_posts, wrangled_forum_views, filtered_forum_elements(), &quot;over_5_hr&quot;, &quot;other&quot;, &quot;audit&quot;, &quot;All&quot;) "]
]
